#! /usr/bin/env bash
#*******************************************************************************
# Copyright (c) 2018 Eclipse Foundation and others.
# This program and the accompanying materials are made available
# under the terms of the Eclipse Public License 2.0
# which is available at http://www.eclipse.org/legal/epl-v20.html,
# or the MIT License which is available at https://opensource.org/licenses/MIT.
# SPDX-License-Identifier: EPL-2.0 OR MIT
#*******************************************************************************
#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

IFS=$'\n\t'
SCRIPT_FOLDER="$(dirname "$(readlink -f "${0}")")"

stop_daemon() {
  "${SCRIPT_FOLDER}/buildkitd" stop || :
}

build2() {
  local images="${1}" # comma separated list of image references
  local dockerfile="${2:-Dockerfile}"
  local context="${3:-"$(dirname "${dockerfile}")"}"
  local push="${4:-"false"}"

  # e.g., allows for additionnal --opt build-args
  if [[ $# -gt 4 ]]; then
    shift 4
  else
    shift $#
  fi

  local first_image_name
  first_image_name="$(echo "${images}" | cut -d, -f1)"
  
  "${SCRIPT_FOLDER}/bin/buildctl" build \
    --progress=plain \
    --frontend=dockerfile.v0 \
    --local context="${context}" \
    --local dockerfile="$(dirname "${dockerfile}")" \
    --opt filename="$(basename "${dockerfile}")" \
    --output "type=image,\"name=${images}\",push=${push}" \
    --export-cache "type=registry,mode=max,ref=${first_image_name}-buildcache" \
    "${@}"
}

build_with_cache2() {
  local images="${1}" # comma separated list of image references
  local dockerfile="${2:-Dockerfile}"
  local context="${3:-"$(dirname "${dockerfile}")"}"
  local push="${4:-"false"}"

  # e.g., allows for additionnal --opt build-args
  if [[ $# -gt 4 ]]; then
    shift 4
  else
    shift $#
  fi

  local first_image_name
  first_image_name="$(echo "${images}" | cut -d, -f1)"

  "${SCRIPT_FOLDER}/bin/buildctl" build \
    --progress=plain \
    --frontend=dockerfile.v0 \
    --local context="${context}" \
    --local dockerfile="$(dirname "${dockerfile}")" \
    --opt filename="$(basename "${dockerfile}")" \
    --output "type=image,\"name=${images}\",push=${push}" \
    --export-cache "type=registry,mode=max,ref=${first_image_name}-buildcache" \
    --import-cache "type=registry,ref=${first_image_name}-buildcache" \
    "${@}"
}

build() {
  local image="${1}"
  local tag="${2}"
  local dockerfile="${3:-Dockerfile}"
  local context="${4:-"$(dirname "${dockerfile}")"}"
  local push="${5:-"false"}"
  local latest="${6:-"false"}"

  if [[ $# -gt 6 ]]; then
    shift 6
  else
    shift $#
  fi

  local name="${image}:${tag}"
  if [[ "${latest}" == "true" ]]; then
    name="${name},${image}:latest"
  fi

  "${SCRIPT_FOLDER}/bin/buildctl" build \
    --progress=plain \
    --frontend=dockerfile.v0 \
    --local context="${context}" \
    --local dockerfile="$(dirname "${dockerfile}")" \
    --opt filename="$(basename "${dockerfile}")" \
    --output "type=image,\"name=${name}\",push=${push}" \
    --export-cache "type=registry,mode=max,ref=${image}:${tag}-buildcache" \
    "${@}"
}

build_with_cache() {
  local image="${1}"
  local tag="${2}"
  local dockerfile="${3:-Dockerfile}"
  local context="${4:-"$(dirname "${dockerfile}")"}"
  local push="${5:-"false"}"
  local latest="${6:-"false"}"

  if [[ $# -gt 6 ]]; then
    shift 6
  else
    shift $#
  fi

  local name="${image}:${tag}"
  if [[ "${latest}" == "true" ]]; then
    name="${name},${image}:latest"
  fi

  "${SCRIPT_FOLDER}/bin/buildctl" build \
    --progress=plain \
    --frontend=dockerfile.v0 \
    --local context="${context}" \
    --local dockerfile="$(dirname "${dockerfile}")" \
    --opt filename="$(basename "${dockerfile}")" \
    --output "type=image,\"name=${name}\",push=${push}" \
    --export-cache "type=registry,mode=max,ref=${image}:${tag}-buildcache" \
    --import-cache "type=registry,ref=${image}:${tag}-buildcache" \
    "${@}"
}

prune() {
  "${SCRIPT_FOLDER}/bin/buildctl" prune \
    --keep-storage "${1:-10240}"
}

main() {
  echo "You must enter a valid command"
  exit 1
}

run() {
  local args=$*
  local f="${1:-}"

  if [[ "$f" == "" ]]; then
    main
  else
    if [[ "${BUILDCTL_STOP_DAEMON_AFTER_USE:-}" == "true" ]]; then
      trap stop_daemon EXIT
    fi
    "${SCRIPT_FOLDER}/buildkitd" start
    BUILDKIT_HOST="$("${SCRIPT_FOLDER}/buildkitd" host)"
    export BUILDKIT_HOST
    $args
  fi
}

run "$@"